package main.java.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Client to access the SonarQube H2 database
 * @author Tomas Lestyan
 */
public class SonarDbClient {

	/** The logger object */
	private final Logger log = LoggerFactory.getLogger(this.getClass());
	private static final int DEFAULT_TIMEOUT = 1000;
	private static final String DB_URL = "jdbc:h2:tcp://localhost:9092/sonar";
	private static final String JDBC_H2_DRIVER = "org.h2.Driver";
	private Connection connection;

	/**
	 * Constructor
	 */
	public SonarDbClient() {
		try {
			Class.forName(JDBC_H2_DRIVER);
			connection = DriverManager.getConnection(DB_URL);
		} catch (ClassNotFoundException | SQLException e) {
			// could not create connection
			connection = null;
			log.warn("Connection with SonarQube database not established", e);
		}
		//create tables if necessary
		createTables();
	}

	private boolean createTables() {
		try {
			// check connection
			if (connection == null || !connection.isValid(DEFAULT_TIMEOUT)) return false;
			Statement st = connection.createStatement();
			st.executeUpdate("CREATE TABLE IF NOT EXISTS Components (id varchar(255) NOT NULL, ProjectsKEE varchar(255) NOT NULL, startLine int, endLine int, PRIMARY KEY (id)); "
					//			st.executeUpdate("CREATE TABLE IF NOT EXISTS Components (id varchar(255) NOT NULL, ProjectsKEE varchar(255) NOT NULL REFERENCES Projects (KEE), startLine int, endLine int, PRIMARY KEY (id)); "
					+ "CREATE TABLE IF NOT EXISTS Measures (id int GENERATED BY DEFAULT AS IDENTITY, Metricsid int NOT NULL  REFERENCES Metrics (id), Componentsid varchar(255) NOT NULL  REFERENCES Components (id), value int, PRIMARY KEY (id)); "
					+ "CREATE TABLE IF NOT EXISTS RecentMeasures (id int GENERATED BY DEFAULT AS IDENTITY, value int, Componentsid varchar(255) NOT NULL  REFERENCES Components (id), Metricsid int NOT NULL  REFERENCES Metrics (id), PRIMARY KEY (id));");
			st.close();
		} catch (SQLException e) {
			log.warn("Can't create the metrics and records table", e);
			return false;
		}
		return true;
	}

	public void saveComponent(String id, String sonarComponentID, int startLine, int endLine) {
		try {
			// check connection
			if (connection == null || !connection.isValid(DEFAULT_TIMEOUT)) {
				return;
			}
			Statement st = connection.createStatement();
			st.executeUpdate(String.format("INSERT INTO Components (id , ProjectsKEE , startLine, endLine) VALUES ('%s', '%s', %s, %s)", id, sonarComponentID, startLine, endLine));
			st.close();
		} catch (SQLException e) {
			log.warn("Can't save the value of component: " + id, e);
		}
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#finalize()
	 */
	@Override
	protected void finalize() throws Throwable {
		try {
			if (connection != null) {
				connection.close();
			}
		} catch (SQLException e) {
			log.warn("Can't close the connection", e);
		}
		super.finalize();
	}

}
